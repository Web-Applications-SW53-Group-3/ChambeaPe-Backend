// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using _3._Data.Context;

#nullable disable

namespace _3._Data.Migrations
{
    [DbContext(typeof(ChambeaPeContext))]
    [Migration("20231028231155_28-10-2023-18-11")]
    partial class _281020231811
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_0900_ai_ci")
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");

            modelBuilder.Entity("_3._Data.Model.Advertisement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("category");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2023, 10, 28, 18, 11, 54, 357, DateTimeKind.Local).AddTicks(2048))
                        .HasColumnName("Date_created");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime")
                        .HasColumnName("Date_updated");

                    b.Property<DateTime>("EndDay")
                        .HasColumnType("datetime")
                        .HasColumnName("end_day");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("PictureUrl")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("picture_url");

                    b.Property<DateTime>("StartDay")
                        .HasColumnType("datetime")
                        .HasColumnName("start_day");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<int>("WorkerId")
                        .HasColumnType("int")
                        .HasColumnName("Worker_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "WorkerId" }, "Advertisements_Worker");

                    b.ToTable("advertisements", (string)null);
                });

            modelBuilder.Entity("_3._Data.Model.Certificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("CertificateName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("certificate_name");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime")
                        .HasColumnName("Date_created");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime")
                        .HasColumnName("Date_updated");

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("imgUrl");

                    b.Property<string>("InstitutionName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("institution_name");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime")
                        .HasColumnName("issue_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("name");

                    b.Property<string>("TeacherName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("teacher_name");

                    b.Property<int>("WorkerId")
                        .HasColumnType("int")
                        .HasColumnName("Worker_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "WorkerId" }, "Certificates_Worker");

                    b.ToTable("certificates", (string)null);
                });

            modelBuilder.Entity("_3._Data.Model.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime")
                        .HasColumnName("creation_time");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2023, 10, 28, 18, 11, 54, 357, DateTimeKind.Local).AddTicks(9577))
                        .HasColumnName("Date_created");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime")
                        .HasColumnName("Date_updated");

                    b.Property<int>("EmployerId")
                        .HasColumnType("int")
                        .HasColumnName("Employer_id");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<int>("MessageId")
                        .HasColumnType("int")
                        .HasColumnName("Message_id");

                    b.Property<int>("WorkerId")
                        .HasColumnType("int")
                        .HasColumnName("Worker_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "EmployerId" }, "Chat_Employer");

                    b.HasIndex(new[] { "MessageId" }, "Chat_Message");

                    b.HasIndex(new[] { "WorkerId" }, "Chat_Worker");

                    b.ToTable("chat", (string)null);
                });

            modelBuilder.Entity("_3._Data.Model.Claim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("ChatId")
                        .HasColumnType("int")
                        .HasColumnName("Chat_id");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime")
                        .HasColumnName("creation_time");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2023, 10, 28, 18, 11, 54, 358, DateTimeKind.Local).AddTicks(5680))
                        .HasColumnName("Date_created");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime")
                        .HasColumnName("Date_updated");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<int>("MessageId")
                        .HasColumnType("int")
                        .HasColumnName("Message_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ChatId" }, "Claims_Chat");

                    b.HasIndex(new[] { "MessageId" }, "Claims_Message");

                    b.ToTable("claims", (string)null);
                });

            modelBuilder.Entity("_3._Data.Model.Contract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2023, 10, 28, 18, 11, 54, 359, DateTimeKind.Local).AddTicks(119))
                        .HasColumnName("Date_created");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime")
                        .HasColumnName("Date_updated");

                    b.Property<DateTime>("EndDay")
                        .HasColumnType("datetime")
                        .HasColumnName("end_day");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<int>("PostsId")
                        .HasColumnType("int")
                        .HasColumnName("Posts_id");

                    b.Property<decimal>("Salary")
                        .HasPrecision(6, 2)
                        .HasColumnType("decimal(6,2)")
                        .HasColumnName("salary");

                    b.Property<DateTime>("StartDay")
                        .HasColumnType("datetime")
                        .HasColumnName("start_day");

                    b.Property<int>("WorkerId")
                        .HasColumnType("int")
                        .HasColumnName("Worker_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "WorkerId" }, "Contract_Worker");

                    b.HasIndex(new[] { "PostsId" }, "Contract_posts");

                    b.ToTable("contract", (string)null);
                });

            modelBuilder.Entity("_3._Data.Model.Employer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2023, 10, 28, 18, 11, 54, 359, DateTimeKind.Local).AddTicks(4616))
                        .HasColumnName("Date_created");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime")
                        .HasColumnName("Date_updated");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserId" }, "Employer_User");

                    b.ToTable("employer", (string)null);
                });

            modelBuilder.Entity("_3._Data.Model.Evidence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("ClaimsId")
                        .HasColumnType("int")
                        .HasColumnName("Claims_id");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2023, 10, 28, 18, 11, 54, 359, DateTimeKind.Local).AddTicks(7639))
                        .HasColumnName("Date_created");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime")
                        .HasColumnName("Date_updated");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("image");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ClaimsId" }, "Evidences_Claims");

                    b.ToTable("evidences", (string)null);
                });

            modelBuilder.Entity("_3._Data.Model.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("content");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2023, 10, 28, 18, 11, 54, 360, DateTimeKind.Local).AddTicks(245))
                        .HasColumnName("Date_created");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime")
                        .HasColumnName("Date_updated");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<int>("SendById")
                        .HasColumnType("int")
                        .HasColumnName("send_by_id");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime")
                        .HasColumnName("time");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("message", (string)null);
                });

            modelBuilder.Entity("_3._Data.Model.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime")
                        .HasColumnName("date");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2023, 10, 28, 18, 11, 54, 360, DateTimeKind.Local).AddTicks(1708))
                        .HasColumnName("Date_created");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime")
                        .HasColumnName("Date_updated");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("notifications", (string)null);
                });

            modelBuilder.Entity("_3._Data.Model.Portfolio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2023, 10, 28, 18, 11, 54, 360, DateTimeKind.Local).AddTicks(3469))
                        .HasColumnName("Date_created");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime")
                        .HasColumnName("Date_updated");

                    b.Property<int>("ImageUrl")
                        .HasColumnType("int")
                        .HasColumnName("image_url");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<int>("WorkerId")
                        .HasColumnType("int")
                        .HasColumnName("Worker_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "WorkerId" }, "Portfolio_Worker");

                    b.ToTable("portfolio", (string)null);
                });

            modelBuilder.Entity("_3._Data.Model.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2023, 10, 28, 18, 11, 54, 360, DateTimeKind.Local).AddTicks(6432))
                        .HasColumnName("Date_created");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime")
                        .HasColumnName("Date_updated");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("EmployerId")
                        .HasColumnType("int")
                        .HasColumnName("Employer_id");

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("imgUrl");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Subtitle")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("subtitle");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "EmployerId" }, "posts_Employer");

                    b.ToTable("posts", (string)null);
                });

            modelBuilder.Entity("_3._Data.Model.Premium", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2023, 10, 28, 18, 11, 54, 360, DateTimeKind.Local).AddTicks(9139))
                        .HasColumnName("Date_created");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime")
                        .HasColumnName("Date_updated");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<decimal>("Price")
                        .HasPrecision(6, 2)
                        .HasColumnType("decimal(6,2)")
                        .HasColumnName("price");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("premium", (string)null);
                });

            modelBuilder.Entity("_3._Data.Model.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime")
                        .HasColumnName("date");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2023, 10, 28, 18, 11, 54, 361, DateTimeKind.Local).AddTicks(1502))
                        .HasColumnName("Date_created");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime")
                        .HasColumnName("Date_updated");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("EmployerId")
                        .HasColumnType("int")
                        .HasColumnName("Employer_id");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<int>("SentById")
                        .HasColumnType("int")
                        .HasColumnName("sent_by_id");

                    b.Property<int>("WorkerId")
                        .HasColumnType("int")
                        .HasColumnName("Worker_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "EmployerId" }, "Reviews_Employer");

                    b.HasIndex(new[] { "WorkerId" }, "Reviews_Worker");

                    b.ToTable("reviews", (string)null);
                });

            modelBuilder.Entity("_3._Data.Model.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("ContractId")
                        .HasColumnType("int")
                        .HasColumnName("Contract_id");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2023, 10, 28, 18, 11, 54, 361, DateTimeKind.Local).AddTicks(5662))
                        .HasColumnName("Date_created");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime")
                        .HasColumnName("Date_updated");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ContractId" }, "Service_Contract");

                    b.ToTable("service", (string)null);
                });

            modelBuilder.Entity("_3._Data.Model.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("content");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2023, 10, 28, 18, 11, 54, 361, DateTimeKind.Local).AddTicks(8742))
                        .HasColumnName("Date_created");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime")
                        .HasColumnName("Date_updated");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<int>("WorkerId")
                        .HasColumnType("int")
                        .HasColumnName("Worker_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "WorkerId" }, "Table_62_Worker");

                    b.ToTable("skills", (string)null);
                });

            modelBuilder.Entity("_3._Data.Model.Suscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2023, 10, 28, 18, 11, 54, 362, DateTimeKind.Local).AddTicks(1982))
                        .HasColumnName("Date_created");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime")
                        .HasColumnName("Date_updated");

                    b.Property<DateTime>("EndDay")
                        .HasColumnType("datetime")
                        .HasColumnName("end_day");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<int>("PremiumId")
                        .HasColumnType("int")
                        .HasColumnName("Premium_id");

                    b.Property<DateTime>("StartDay")
                        .HasColumnType("datetime")
                        .HasColumnName("start_day");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "PremiumId" }, "Suscription_Premium");

                    b.HasIndex(new[] { "UserId" }, "Suscription_User");

                    b.ToTable("suscription", (string)null);
                });

            modelBuilder.Entity("_3._Data.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime")
                        .HasColumnName("birthdate");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2023, 10, 28, 18, 11, 54, 362, DateTimeKind.Local).AddTicks(5901))
                        .HasColumnName("Date_created");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime")
                        .HasColumnName("Date_updated");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("first_name");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("char(1)")
                        .HasColumnName("gender")
                        .IsFixedLength();

                    b.Property<bool>("HasPremium")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("has_premium");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("last_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("password");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("phone_number");

                    b.Property<string>("ProfilePic")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("profile_pic");

                    b.Property<string>("UserRole")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("char(1)")
                        .HasColumnName("user_role")
                        .IsFixedLength();

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("_3._Data.Model.UserNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2023, 10, 28, 18, 11, 54, 362, DateTimeKind.Local).AddTicks(8664))
                        .HasColumnName("Date_created");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime")
                        .HasColumnName("Date_updated");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<int>("NotificationsId")
                        .HasColumnType("int")
                        .HasColumnName("Notifications_id");

                    b.Property<bool>("Read")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("read");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "NotificationsId" }, "User_Notifications_Notifications");

                    b.HasIndex(new[] { "UserId" }, "User_Notifications_User");

                    b.ToTable("user_notifications", (string)null);
                });

            modelBuilder.Entity("_3._Data.Model.Worker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2023, 10, 28, 18, 11, 54, 363, DateTimeKind.Local).AddTicks(2926))
                        .HasColumnName("Date_created");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime")
                        .HasColumnName("Date_updated");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Occupation")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("occupation");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserId" }, "Worker_User");

                    b.ToTable("worker", (string)null);
                });

            modelBuilder.Entity("_3._Data.Model.Advertisement", b =>
                {
                    b.HasOne("_3._Data.Model.Worker", "Worker")
                        .WithMany("Advertisements")
                        .HasForeignKey("WorkerId")
                        .IsRequired()
                        .HasConstraintName("Advertisements_Worker");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("_3._Data.Model.Certificate", b =>
                {
                    b.HasOne("_3._Data.Model.Worker", "Worker")
                        .WithMany("Certificates")
                        .HasForeignKey("WorkerId")
                        .IsRequired()
                        .HasConstraintName("Certificates_Worker");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("_3._Data.Model.Chat", b =>
                {
                    b.HasOne("_3._Data.Model.Employer", "Employer")
                        .WithMany("Chats")
                        .HasForeignKey("EmployerId")
                        .IsRequired()
                        .HasConstraintName("Chat_Employer");

                    b.HasOne("_3._Data.Model.Message", "Message")
                        .WithMany("Chats")
                        .HasForeignKey("MessageId")
                        .IsRequired()
                        .HasConstraintName("Chat_Message");

                    b.HasOne("_3._Data.Model.Worker", "Worker")
                        .WithMany("Chats")
                        .HasForeignKey("WorkerId")
                        .IsRequired()
                        .HasConstraintName("Chat_Worker");

                    b.Navigation("Employer");

                    b.Navigation("Message");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("_3._Data.Model.Claim", b =>
                {
                    b.HasOne("_3._Data.Model.Chat", "Chat")
                        .WithMany("Claims")
                        .HasForeignKey("ChatId")
                        .IsRequired()
                        .HasConstraintName("Claims_Chat");

                    b.HasOne("_3._Data.Model.Message", "Message")
                        .WithMany("Claims")
                        .HasForeignKey("MessageId")
                        .IsRequired()
                        .HasConstraintName("Claims_Message");

                    b.Navigation("Chat");

                    b.Navigation("Message");
                });

            modelBuilder.Entity("_3._Data.Model.Contract", b =>
                {
                    b.HasOne("_3._Data.Model.Post", "Posts")
                        .WithMany("Contracts")
                        .HasForeignKey("PostsId")
                        .IsRequired()
                        .HasConstraintName("Contract_posts");

                    b.HasOne("_3._Data.Model.Worker", "Worker")
                        .WithMany("Contracts")
                        .HasForeignKey("WorkerId")
                        .IsRequired()
                        .HasConstraintName("Contract_Worker");

                    b.Navigation("Posts");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("_3._Data.Model.Employer", b =>
                {
                    b.HasOne("_3._Data.Model.User", "User")
                        .WithMany("Employers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("Employer_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("_3._Data.Model.Evidence", b =>
                {
                    b.HasOne("_3._Data.Model.Claim", "Claims")
                        .WithMany("Evidences")
                        .HasForeignKey("ClaimsId")
                        .IsRequired()
                        .HasConstraintName("Evidences_Claims");

                    b.Navigation("Claims");
                });

            modelBuilder.Entity("_3._Data.Model.Portfolio", b =>
                {
                    b.HasOne("_3._Data.Model.Worker", "Worker")
                        .WithMany("Portfolios")
                        .HasForeignKey("WorkerId")
                        .IsRequired()
                        .HasConstraintName("Portfolio_Worker");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("_3._Data.Model.Post", b =>
                {
                    b.HasOne("_3._Data.Model.Employer", "Employer")
                        .WithMany("Posts")
                        .HasForeignKey("EmployerId")
                        .IsRequired()
                        .HasConstraintName("posts_Employer");

                    b.Navigation("Employer");
                });

            modelBuilder.Entity("_3._Data.Model.Review", b =>
                {
                    b.HasOne("_3._Data.Model.Employer", "Employer")
                        .WithMany("Reviews")
                        .HasForeignKey("EmployerId")
                        .IsRequired()
                        .HasConstraintName("Reviews_Employer");

                    b.HasOne("_3._Data.Model.Worker", "Worker")
                        .WithMany("Reviews")
                        .HasForeignKey("WorkerId")
                        .IsRequired()
                        .HasConstraintName("Reviews_Worker");

                    b.Navigation("Employer");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("_3._Data.Model.Service", b =>
                {
                    b.HasOne("_3._Data.Model.Contract", "Contract")
                        .WithMany("Services")
                        .HasForeignKey("ContractId")
                        .IsRequired()
                        .HasConstraintName("Service_Contract");

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("_3._Data.Model.Skill", b =>
                {
                    b.HasOne("_3._Data.Model.Worker", "Worker")
                        .WithMany("Skills")
                        .HasForeignKey("WorkerId")
                        .IsRequired()
                        .HasConstraintName("Table_62_Worker");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("_3._Data.Model.Suscription", b =>
                {
                    b.HasOne("_3._Data.Model.Premium", "Premium")
                        .WithMany("Suscriptions")
                        .HasForeignKey("PremiumId")
                        .IsRequired()
                        .HasConstraintName("Suscription_Premium");

                    b.HasOne("_3._Data.Model.User", "User")
                        .WithMany("Suscriptions")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("Suscription_User");

                    b.Navigation("Premium");

                    b.Navigation("User");
                });

            modelBuilder.Entity("_3._Data.Model.UserNotification", b =>
                {
                    b.HasOne("_3._Data.Model.Notification", "Notifications")
                        .WithMany("UserNotifications")
                        .HasForeignKey("NotificationsId")
                        .IsRequired()
                        .HasConstraintName("User_Notifications_Notifications");

                    b.HasOne("_3._Data.Model.User", "User")
                        .WithMany("UserNotifications")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("User_Notifications_User");

                    b.Navigation("Notifications");

                    b.Navigation("User");
                });

            modelBuilder.Entity("_3._Data.Model.Worker", b =>
                {
                    b.HasOne("_3._Data.Model.User", "User")
                        .WithMany("Workers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("Worker_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("_3._Data.Model.Chat", b =>
                {
                    b.Navigation("Claims");
                });

            modelBuilder.Entity("_3._Data.Model.Claim", b =>
                {
                    b.Navigation("Evidences");
                });

            modelBuilder.Entity("_3._Data.Model.Contract", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("_3._Data.Model.Employer", b =>
                {
                    b.Navigation("Chats");

                    b.Navigation("Posts");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("_3._Data.Model.Message", b =>
                {
                    b.Navigation("Chats");

                    b.Navigation("Claims");
                });

            modelBuilder.Entity("_3._Data.Model.Notification", b =>
                {
                    b.Navigation("UserNotifications");
                });

            modelBuilder.Entity("_3._Data.Model.Post", b =>
                {
                    b.Navigation("Contracts");
                });

            modelBuilder.Entity("_3._Data.Model.Premium", b =>
                {
                    b.Navigation("Suscriptions");
                });

            modelBuilder.Entity("_3._Data.Model.User", b =>
                {
                    b.Navigation("Employers");

                    b.Navigation("Suscriptions");

                    b.Navigation("UserNotifications");

                    b.Navigation("Workers");
                });

            modelBuilder.Entity("_3._Data.Model.Worker", b =>
                {
                    b.Navigation("Advertisements");

                    b.Navigation("Certificates");

                    b.Navigation("Chats");

                    b.Navigation("Contracts");

                    b.Navigation("Portfolios");

                    b.Navigation("Reviews");

                    b.Navigation("Skills");
                });
#pragma warning restore 612, 618
        }
    }
}
